{
  parserClass="com.warmthdawn.zenscript.parser.ZenScriptParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="ZenScript"
  psiImplClassSuffix="Impl"
  psiPackage="com.warmthdawn.zenscript.psi"
  psiImplPackage="com.warmthdawn.zenscript.psi.impl"

  elementTypeHolderClass="com.warmthdawn.zenscript.psi.ZenScriptTypes"
  elementTypeClass="com.warmthdawn.zenscript.psi.ZenScriptElementType"
  tokenTypeClass="com.warmthdawn.zenscript.psi.ZenScriptTokenType"
  
  tokens=[
    K_VAR                 ='var'
    K_VAL                 ='val'
    K_GLOBAL              ='global'
    K_STATIC              ='static'
    K_IMPORT              ='import'
    K_FUNCTION            ='function'
    K_AS                  ='as'
    K_TO                  ='to'
    K_IN                  ='in'
    K_HAS                 ='has'
    K_INSTANCEOF          ='instanceof'
    K_THIS                ='this'
    K_SUPER               ='super'

    K_ANY                 ='any'
    K_BYTE                ='byte'
    K_SHORT               ='short'
    K_INT                 ='int'
    K_LONG                ='long'
    K_FLOAT               ='float'
    K_DOUBLE              ='double'
    K_BOOL                ='bool'
    K_VOID                ='void'
    K_STRING              ='string'

    K_TRUE                ='true'
    K_FALSE               ='false'
    K_NULL                ='null'

    K_IF                  ='if'
    K_ELSE                ='else'
    K_FOR                 ='for'
    K_DO                  ='do'
    K_WHILE               ='while'
    K_BREAK               ='break'
    K_CONTINUE            ='continue'
    K_RETURN              ='return'
    K_ZEN_CLASS           ='zenClass'
    K_ZEN_CONSTRUCTOR     ='zenConstructor'
    K_EXPAND              ='$expand'

    // Separators
    PAREN_OPEN            ='('
    PAREN_CLOSE           =')'
    BRACK_OPEN            ='['
    BRACK_CLOSE           =']'
    BRACE_OPEN            ='{'
    BRACE_CLOSE           ='}'
    COMMA                 =','
    DOT                   ='.'
    SEMICOLON             =';'

    // Operators
    OP_ADD                ='+'
    OP_SUB                ='-'
    OP_MUL                ='*'
    OP_DIV                ='/'
    OP_MOD                ='%'
    OP_CAT                ='~'
    OP_NOT                ='!'
    OP_LESS               ='<'
    OP_GREATER            ='>'
    OP_XOR                ='^'
    OP_COLON              =':'
    OP_QUEST              ='?'
    OP_BACKTICK           ='`'
    OP_DOLLAR             ='$'
    OP_AND                ='&'
    OP_OR                 ='|'
    OP_ASSIGN             ='='

    OP_AND_AND            ='&&'
    OP_OR_OR              ='||'
    OP_EQUAL              ='=='
    OP_NOT_EQUAL          ='!='
    OP_LESS_EQUAL         ='<='
    OP_GREATER_EQUAL      ='>='
    OP_ADD_ASSIGN         ='+='
    OP_SUB_ASSIGN         ='-='
    OP_MUL_ASSIGN         ='*='
    OP_DIV_ASSIGN         ='/='
    OP_MOD_ASSIGN         ='%='
    OP_XOR_ASSIGN         ='^='
    OP_AND_ASSIGN         ='&='
    OP_OR_ASSIGN          ='|='
    OP_CAT_ASSIGN         ='~='
    OP_DOT_DOT            ='..'

    LINE_COMMENT          ='LINE_COMMENT'
    BLOCK_COMMENT         ='BLOCK_COMMENT'
    DOC_COMMENT           ='DOC_COMMENT'
    PREPROCESSOR          ='PREPROCESSOR'

    ID                    ='regexp:[a-zA-Z_][a-zA-Z0-9_]*'
    STRING_LITERAL        ="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\\"|\\\'|\\)*\")"
    INT_LITERAL           ='regexp:(0|([1-9][0-9]*))'
    WHITE_SPACE           ='regexp:[ \r\t\f\n]+'
  ]


  extends("[a-z][a-zA-Z]*Expression")=expression
  extends("[a-z][a-zA-Z]*Literal")=literalExpression
  extends("[a-z][a-zA-Z]*Type")=type
}

file ::= importList scriptBody

importList ::= (importDeclaration)*

identifier ::= ID | 'to'

qualifiedName ::= qualifier? identifier { pin=1 }
qualifier ::= (identifier '.')+ { pin(".*")=2 }


importDeclaration ::= 'import' qualifiedName ('as' identifier)? ';' { pin(".*")=1 }

scriptBody ::= (functionDeclaration | expandFunctionDeclaration | classDeclaration | statement)*

functionDeclaration ::=
    ('static')? 'function' identifier parameters ('as' type)? functionBody
    { pin=3 }

expandFunctionDeclaration ::= '$expand' type '$' identifier parameters ('as' type)? functionBody { pin(".*")=1 }

parameters ::='(' parametersList? ')' { pin(".*")=1 }
private parametersList ::= parameter (',' parameter)*  { pin(".*")="','" }
parameter ::= identifier ('as' type)? ('=' expression)? { pin(".*")=1 }

functionBody ::= '{' statement* '}' { pin=1 }

classDeclaration ::=
    'zenClass' qualifiedName '{' (variableDeclaration | constructorDeclaration | functionDeclaration)* '}' { pin=1 }

constructorDeclaration ::=
    'zenConstructor' parameters constructorBody { pin=1 }

constructorBody ::= '{' statement* '}' { pin=1 }

variableDeclaration ::=
    ('var' | 'val' | 'static' | 'global') identifier ('as' type)? ('=' expression)? ';' { pin(".*")=1 }

statement ::=
      blockStatement
    | returnStatement
    | breakStatement
    | continueStatement
    | ifStatement
    | foreachStatement
    | whileStatement
    | variableDeclaration
    | expressionStatement

blockStatement ::= '{' statement* '}' { pin=1 }

returnStatement ::= 'return' expression? ';' { pin=1 }

breakStatement ::= 'break' ';' { pin=1 }

continueStatement ::= 'continue' ';' { pin=1 }

ifStatement ::= 'if' expression thenBody ('else' elseBody)? { pin(".*")=1 }

private thenBody ::=
    statement

private elseBody ::=
    statement

foreachStatement ::=
    'for' foreachEntry 'in' expression foreachBody { pin=1}

private foreachEntry ::=  forEachEntryWithParen | foreachEntryNoParen
private forEachEntryWithParen ::= '(' foreachEntryNoParen ')' { pin=1 }
private foreachEntryNoParen ::= simpleVariable (',' simpleVariable)* { pin(".*")=1 }

private simpleVariable ::=
    identifier

foreachBody ::=
    '{' statement* '}' { pin=1 }

whileStatement ::=
    'while' '(' expression ')' statement { pin=1 }

expressionStatement ::=
    expression ';' { pin=1 }

expression ::=
      assignmentExpression
    | conditionalExpression
    | orOrExpression
    | andAndExpression
    | orExpression
    | xorExpression
    | andExpression
    | compareExpression
    | addExpression
    | mulExpression
    | unaryExpression
    | rangeExpression
    | postfixExpression
//    | postfixGroup
//    | parenExpression

rangeExpression ::= expression ('to' | '..') expression
unaryExpression ::= ('!' | '-') expression { rightAssociative = true; pin=1; }
mulExpression ::= expression ('*' | '/' | '%') expression
addExpression ::= expression ('+' | '-' | '~') expression
compareExpression ::= expression ('==' | '!=' | '<' | '<=' | '>' | '>=' | 'in' | 'has') expression  { rightAssociative = true }
andExpression ::= expression '&' expression
xorExpression ::= expression '^'expression
orExpression ::= expression '|' expression
andAndExpression ::= expression '&&' expression
orOrExpression ::= expression '||' expression
conditionalExpression ::= expression conditionalTail  { rightAssociative = true }
assignmentExpression ::= expression ('=' | '+=' | '-=' | '*=' | '/=' | '%=' | '~=' | '&=' | '|=' | '^=') expression  { rightAssociative = true }
parenExpression ::= '(' expression ')' { pin=1 }

private conditionalTail ::= '?' expression ':' expression { pin=1 }
//private postfixGroup ::=
//  memberAccessExpression | arrayIndexExpression | callExpression
//| typeCastExpression | instanceOfExpression | referenceExpression | literalExpression

private memberName ::= identifier | 'string'

left memberAccessExpression ::= '.' memberName { pin=1 }
left arrayIndexExpression ::= '[' expression ']' { pin=1 }
left callExpression ::= arguments
left typeCastExpression ::= 'as' type { pin=1 }
left instanceOfExpression ::= 'instanceof' type { pin=1 }


private primaryExpression ::= literalExpression | referenceExpression | parenExpression { pin=1 }
postfixExpression ::=  primaryExpression (
      memberAccessExpression
    | arrayIndexExpression
    | callExpression
    | typeCastExpression
    | instanceOfExpression
)* { pin=1 }



referenceExpression ::= identifier | primitiveType


literalExpression ::= arrayLiteral | mapLiteral | functionLiteral | bracketHandlerLiteral | primitiveLiteral

arrayLiteral ::= '[' expression (',' (expression | &']'))* ']' { pin(".*")=1 }
mapLiteral ::= '{' mapEntry (',' (mapEntry | &'}'))* '}' { pin(".*")=1 }

functionLiteral ::= 'function' parameters ('as' type)? functionBody { pin=2 }

primitiveLiteral ::=
      INT_LITERAL
    | LONG_LITERAL
    | FLOAT_LITERAL
    | DOUBLE_LITERAL
    | STRING_LITERAL
    | 'true'
    | 'false'
    | 'null'

bracketHandlerLiteral ::= '<' (!'>')* '>' { pin=1 }

arguments ::= '(' argumentList? ')' { pin=1 }
private argumentList ::= expression (',' expression)* { pin(".*")="','" }

mapEntry ::= expression ':' expression { pin=2 }



classType ::= identifier (qualifiedClassType)*
left qualifiedClassType ::= '.' identifier { pin=1 }

type ::=
    primitiveType
  | arrayType
  | mapType
  | listType
  | classType
  | functionType

functionType ::= 'function' '(' (type (',' type)*)? ')' type { pin=1 }
listType ::= '[' type ']' { pin=1 }
arrayType ::= type '[' ']'
mapType ::= type '[' type ']'
primitiveType ::=
    'any'
  | 'byte'
  | 'short'
  | 'int'
  | 'long'
  | 'float'
  | 'double'
  | 'bool'
  | 'void'
  | 'string'

