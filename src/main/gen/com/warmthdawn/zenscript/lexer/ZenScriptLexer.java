// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: ZenScript.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.warmthdawn.zenscript.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;
import static com.warmthdawn.zenscript.psi.ZenScriptTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


public class ZenScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\10\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\0\2\36\1\37\1\40\1\41\1\42\5\43\1\44"+
    "\10\43\1\45\2\43\1\46\2\43\1\47\1\50\1\51"+
    "\1\52\1\43\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\43\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\43\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\5\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\21\31"+
    "\1\36\1\37\1\40\1\41\1\42\1\5\1\0\2\6"+
    "\1\0\1\43\1\44\1\45\1\0\1\46\1\47\1\50"+
    "\1\51\1\0\1\52\1\53\1\0\1\54\1\0\1\55"+
    "\1\56\1\57\1\60\1\31\1\61\4\31\1\62\7\31"+
    "\1\63\1\31\1\64\7\31\1\65\5\31\1\66\1\67"+
    "\1\70\3\0\2\52\1\0\1\22\1\71\10\31\1\72"+
    "\2\31\1\73\2\31\1\74\11\31\1\75\1\76\3\31"+
    "\4\0\1\77\1\0\1\100\1\31\1\101\2\31\1\102"+
    "\6\31\1\103\1\104\5\31\1\105\1\106\1\107\2\31"+
    "\1\0\1\77\1\110\1\111\1\112\2\31\1\113\1\114"+
    "\5\31\1\115\2\31\1\116\1\117\2\31\1\0\1\111"+
    "\1\0\1\120\1\31\1\121\1\31\1\122\1\123\1\31"+
    "\1\124\1\125\1\126\2\31\1\127\1\111\5\31\1\130"+
    "\1\131\1\31\1\132\3\31\1\133\4\31\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\110\0\110\0\220\0\330\0\u0120\0\u0168"+
    "\0\u01b0\0\u01f8\0\u0240\0\u0288\0\110\0\110\0\u02d0\0\u0318"+
    "\0\110\0\u0360\0\u03a8\0\u03f0\0\u0438\0\u0480\0\110\0\110"+
    "\0\u04c8\0\u0510\0\u0558\0\110\0\u05a0\0\110\0\110\0\u05e8"+
    "\0\110\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0"+
    "\0\u0828\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20"+
    "\0\u0a68\0\u0ab0\0\110\0\u0af8\0\110\0\u0b40\0\110\0\110"+
    "\0\u0b88\0\110\0\u0bd0\0\u0c18\0\110\0\110\0\110\0\u0c60"+
    "\0\110\0\110\0\110\0\110\0\u0ca8\0\u0cf0\0\110\0\u0d38"+
    "\0\110\0\u0d80\0\110\0\110\0\110\0\110\0\u0dc8\0\u05a0"+
    "\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008"+
    "\0\u1050\0\u1098\0\u10e0\0\u1128\0\u05a0\0\u1170\0\u11b8\0\u1200"+
    "\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u05a0\0\u13f8"+
    "\0\u1440\0\u1488\0\u14d0\0\u1518\0\110\0\110\0\110\0\u1560"+
    "\0\u15a8\0\u15f0\0\110\0\u1638\0\u1680\0\u16c8\0\u05a0\0\u1710"+
    "\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1878\0\u18c0\0\u1908\0\u05a0"+
    "\0\u1950\0\u1998\0\u05a0\0\u19e0\0\u1a28\0\u05a0\0\u1a70\0\u1ab8"+
    "\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u05a0"+
    "\0\u05a0\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8"+
    "\0\u1e60\0\u1ef0\0\u05a0\0\u1f38\0\u05a0\0\u1f80\0\u1fc8\0\u05a0"+
    "\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130\0\u2178\0\u05a0\0\u05a0"+
    "\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0\0\u05a0\0\u05a0\0\u05a0"+
    "\0\u2328\0\u2370\0\u23b8\0\110\0\110\0\u2400\0\u05a0\0\u2448"+
    "\0\u2490\0\u05a0\0\u05a0\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8"+
    "\0\u05a0\0\u2640\0\u2688\0\u05a0\0\u05a0\0\u26d0\0\u2718\0\u2760"+
    "\0\110\0\u27a8\0\110\0\u27f0\0\u05a0\0\u2838\0\u05a0\0\u05a0"+
    "\0\u2880\0\u05a0\0\u05a0\0\u05a0\0\u28c8\0\u2910\0\110\0\u2958"+
    "\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u05a0\0\u05a0\0\u2b08"+
    "\0\u05a0\0\u2b50\0\u2b98\0\u2be0\0\u05a0\0\u2c28\0\u2c70\0\u2cb8"+
    "\0\u2d00\0\u05a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\11\35\1\36\1\2"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\35\1\53\1\35\1\54"+
    "\2\35\1\55\1\56\1\57\1\35\1\60\1\61\2\35"+
    "\1\62\1\63\1\64\1\65\1\66\112\0\1\4\140\0"+
    "\1\67\54\0\2\7\1\0\2\7\1\0\1\7\1\70"+
    "\40\7\1\71\37\7\2\10\1\72\2\10\1\73\102\10"+
    "\60\0\1\74\62\0\1\75\67\0\1\76\17\0\1\77"+
    "\54\0\2\14\1\0\2\14\1\0\1\14\1\0\40\14"+
    "\1\100\37\14\33\0\1\101\107\0\1\102\107\0\1\103"+
    "\77\0\1\104\103\0\1\105\4\0\1\106\6\0\1\107"+
    "\70\0\1\110\27\0\1\111\1\0\1\112\17\0\1\111"+
    "\12\0\1\112\22\0\1\110\10\0\3\26\14\0\1\111"+
    "\21\0\1\111\54\0\1\113\107\0\1\114\107\0\1\115"+
    "\101\0\3\35\6\0\11\35\5\0\30\35\37\0\1\116"+
    "\101\0\3\35\6\0\11\35\5\0\14\35\1\117\3\35"+
    "\1\120\7\35\31\0\3\35\6\0\11\35\5\0\15\35"+
    "\1\121\1\35\1\122\6\35\1\123\1\35\31\0\3\35"+
    "\6\0\11\35\5\0\15\35\1\124\12\35\31\0\3\35"+
    "\6\0\11\35\5\0\15\35\1\125\12\35\31\0\3\35"+
    "\6\0\11\35\5\0\12\35\1\126\15\35\31\0\3\35"+
    "\6\0\11\35\5\0\1\127\11\35\1\130\2\35\1\131"+
    "\4\35\1\132\5\35\31\0\3\35\6\0\11\35\5\0"+
    "\12\35\1\133\15\35\31\0\3\35\6\0\11\35\5\0"+
    "\1\134\27\35\31\0\3\35\6\0\11\35\5\0\5\35"+
    "\1\135\5\35\1\136\1\137\13\35\31\0\3\35\6\0"+
    "\11\35\5\0\15\35\1\140\12\35\31\0\3\35\6\0"+
    "\11\35\5\0\22\35\1\141\5\35\31\0\3\35\6\0"+
    "\11\35\5\0\4\35\1\142\23\35\31\0\3\35\6\0"+
    "\11\35\5\0\7\35\1\143\11\35\1\144\1\145\5\35"+
    "\31\0\3\35\6\0\11\35\5\0\7\35\1\146\5\35"+
    "\1\147\1\35\1\150\10\35\31\0\3\35\6\0\11\35"+
    "\5\0\1\151\14\35\1\152\12\35\31\0\3\35\6\0"+
    "\11\35\5\0\7\35\1\153\20\35\31\0\3\35\6\0"+
    "\11\35\5\0\4\35\1\154\23\35\37\0\1\155\51\0"+
    "\1\156\35\0\1\157\63\0\1\7\15\0\2\7\16\0"+
    "\1\7\2\0\1\7\3\0\2\7\3\0\1\7\6\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\0\1\7\10\0"+
    "\1\72\206\0\1\160\22\0\1\14\10\0\2\14\16\0"+
    "\1\14\2\0\1\14\3\0\2\14\3\0\1\14\6\0"+
    "\1\14\2\0\1\14\1\0\3\14\1\0\1\14\6\0"+
    "\17\161\1\162\70\161\2\106\1\163\2\106\1\164\102\106"+
    "\2\165\4\0\102\165\25\0\3\166\6\0\5\166\11\0"+
    "\6\166\53\0\3\35\6\0\11\35\5\0\26\35\1\167"+
    "\1\35\31\0\3\35\6\0\11\35\5\0\15\35\1\170"+
    "\12\35\31\0\3\35\6\0\11\35\5\0\4\35\1\171"+
    "\23\35\31\0\3\35\6\0\11\35\5\0\21\35\1\172"+
    "\6\35\31\0\3\35\6\0\11\35\5\0\14\35\1\173"+
    "\13\35\31\0\3\35\6\0\11\35\5\0\22\35\1\174"+
    "\5\35\31\0\3\35\6\0\11\35\5\0\20\35\1\175"+
    "\7\35\31\0\3\35\6\0\11\35\5\0\12\35\1\176"+
    "\15\35\31\0\3\35\6\0\11\35\5\0\15\35\1\177"+
    "\12\35\31\0\3\35\6\0\11\35\5\0\17\35\1\200"+
    "\10\35\31\0\3\35\6\0\11\35\5\0\14\35\1\201"+
    "\13\35\31\0\3\35\6\0\11\35\5\0\15\35\1\202"+
    "\12\35\31\0\3\35\6\0\11\35\5\0\20\35\1\203"+
    "\7\35\31\0\3\35\6\0\11\35\5\0\16\35\1\204"+
    "\11\35\31\0\3\35\6\0\11\35\5\0\20\35\1\205"+
    "\1\206\6\35\31\0\3\35\6\0\11\35\5\0\14\35"+
    "\1\207\13\35\31\0\3\35\6\0\11\35\5\0\12\35"+
    "\1\210\15\35\31\0\3\35\6\0\11\35\5\0\21\35"+
    "\1\211\6\35\31\0\3\35\6\0\11\35\5\0\15\35"+
    "\1\212\12\35\31\0\3\35\6\0\11\35\5\0\1\213"+
    "\16\35\1\214\10\35\31\0\3\35\6\0\11\35\5\0"+
    "\16\35\1\215\11\35\31\0\3\35\6\0\11\35\5\0"+
    "\10\35\1\216\17\35\31\0\3\35\6\0\11\35\5\0"+
    "\22\35\1\217\5\35\31\0\3\35\6\0\11\35\5\0"+
    "\12\35\1\220\4\35\1\221\10\35\31\0\3\35\6\0"+
    "\11\35\5\0\10\35\1\222\17\35\31\0\3\35\6\0"+
    "\11\35\5\0\10\35\1\223\17\35\31\0\3\35\6\0"+
    "\11\35\5\0\14\35\1\224\13\35\76\0\1\225\15\0"+
    "\17\161\1\226\70\161\17\227\1\230\4\227\1\231\63\227"+
    "\2\0\1\163\121\0\1\232\120\0\3\166\6\0\5\166"+
    "\1\0\1\111\7\0\6\166\4\0\1\111\46\0\3\35"+
    "\6\0\11\35\5\0\12\35\1\233\15\35\31\0\3\35"+
    "\6\0\11\35\5\0\1\234\27\35\31\0\3\35\6\0"+
    "\11\35\5\0\4\35\1\235\23\35\31\0\3\35\6\0"+
    "\11\35\5\0\21\35\1\236\6\35\31\0\3\35\6\0"+
    "\11\35\5\0\1\35\1\237\26\35\31\0\3\35\6\0"+
    "\11\35\5\0\4\35\1\240\23\35\31\0\3\35\6\0"+
    "\11\35\5\0\20\35\1\241\7\35\31\0\3\35\6\0"+
    "\11\35\5\0\1\242\27\35\31\0\3\35\6\0\11\35"+
    "\5\0\2\35\1\243\25\35\31\0\3\35\6\0\11\35"+
    "\5\0\1\35\1\244\26\35\31\0\3\35\6\0\11\35"+
    "\5\0\15\35\1\245\12\35\31\0\3\35\6\0\11\35"+
    "\5\0\21\35\1\246\6\35\31\0\3\35\6\0\11\35"+
    "\5\0\6\35\1\247\21\35\31\0\3\35\6\0\11\35"+
    "\5\0\12\35\1\250\15\35\31\0\3\35\6\0\11\35"+
    "\5\0\22\35\1\251\5\35\31\0\3\35\6\0\11\35"+
    "\5\0\17\35\1\252\10\35\31\0\3\35\6\0\11\35"+
    "\5\0\21\35\1\253\6\35\31\0\3\35\6\0\11\35"+
    "\5\0\10\35\1\254\17\35\31\0\3\35\6\0\11\35"+
    "\5\0\4\35\1\255\23\35\31\0\3\35\6\0\11\35"+
    "\5\0\20\35\1\256\7\35\31\0\3\35\6\0\11\35"+
    "\5\0\4\35\1\257\23\35\31\0\3\35\6\0\11\35"+
    "\5\0\3\35\1\260\24\35\31\0\3\35\6\0\11\35"+
    "\5\0\12\35\1\261\15\35\31\0\3\35\6\0\1\35"+
    "\1\262\7\35\5\0\30\35\60\0\1\263\33\0\17\161"+
    "\1\226\4\161\1\264\63\161\17\227\1\230\107\227\1\230"+
    "\4\227\1\265\63\227\25\0\3\266\105\0\3\35\6\0"+
    "\11\35\5\0\11\35\1\267\16\35\31\0\3\35\6\0"+
    "\11\35\5\0\10\35\1\270\17\35\31\0\3\35\6\0"+
    "\11\35\5\0\12\35\1\271\15\35\31\0\3\35\6\0"+
    "\11\35\5\0\4\35\1\272\23\35\31\0\3\35\6\0"+
    "\11\35\5\0\21\35\1\273\6\35\31\0\3\35\6\0"+
    "\11\35\5\0\21\35\1\274\6\35\31\0\3\35\6\0"+
    "\11\35\5\0\1\275\27\35\31\0\3\35\6\0\11\35"+
    "\5\0\17\35\1\276\10\35\31\0\3\35\6\0\11\35"+
    "\5\0\1\277\27\35\31\0\3\35\6\0\11\35\5\0"+
    "\17\35\1\300\10\35\31\0\3\35\6\0\11\35\5\0"+
    "\21\35\1\301\6\35\31\0\3\35\6\0\11\35\5\0"+
    "\10\35\1\302\17\35\31\0\3\35\6\0\11\35\5\0"+
    "\14\35\1\303\13\35\31\0\3\35\6\0\11\35\5\0"+
    "\17\35\1\304\10\35\31\0\3\35\6\0\11\35\5\0"+
    "\4\35\1\305\23\35\31\0\3\35\6\0\11\35\5\0"+
    "\12\35\1\306\2\35\1\307\12\35\74\0\1\310\44\0"+
    "\3\266\10\0\1\311\1\312\1\313\14\0\1\311\1\312"+
    "\1\313\53\0\3\35\6\0\11\35\5\0\14\35\1\314"+
    "\13\35\31\0\3\35\6\0\11\35\5\0\4\35\1\315"+
    "\23\35\31\0\3\35\6\0\11\35\5\0\10\35\1\316"+
    "\17\35\31\0\3\35\6\0\11\35\5\0\12\35\1\317"+
    "\15\35\31\0\3\35\6\0\11\35\5\0\21\35\1\320"+
    "\6\35\31\0\3\35\6\0\11\35\5\0\14\35\1\321"+
    "\13\35\31\0\3\35\6\0\11\35\5\0\14\35\1\322"+
    "\13\35\31\0\3\35\6\0\11\35\5\0\2\35\1\323"+
    "\25\35\31\0\3\35\6\0\11\35\5\0\6\35\1\324"+
    "\21\35\31\0\3\35\6\0\11\35\5\0\1\325\27\35"+
    "\31\0\3\35\6\0\11\35\5\0\14\35\1\326\13\35"+
    "\63\0\1\327\55\0\3\330\105\0\3\35\6\0\11\35"+
    "\5\0\22\35\1\331\5\35\31\0\3\35\6\0\11\35"+
    "\5\0\15\35\1\332\12\35\31\0\3\35\6\0\11\35"+
    "\5\0\2\35\1\333\25\35\31\0\3\35\6\0\11\35"+
    "\5\0\20\35\1\334\7\35\31\0\3\35\6\0\11\35"+
    "\5\0\20\35\1\335\7\35\31\0\3\330\10\0\1\311"+
    "\1\0\1\313\14\0\1\311\1\0\1\313\53\0\3\35"+
    "\6\0\11\35\5\0\4\35\1\336\23\35\31\0\3\35"+
    "\6\0\11\35\5\0\14\35\1\337\13\35\31\0\3\35"+
    "\6\0\11\35\5\0\4\35\1\340\23\35\31\0\3\35"+
    "\6\0\11\35\5\0\20\35\1\341\7\35\31\0\3\35"+
    "\6\0\11\35\5\0\21\35\1\342\6\35\31\0\3\35"+
    "\6\0\11\35\5\0\15\35\1\343\12\35\31\0\3\35"+
    "\6\0\11\35\5\0\17\35\1\344\10\35\31\0\3\35"+
    "\6\0\11\35\5\0\5\35\1\345\22\35\31\0\3\35"+
    "\6\0\11\35\5\0\22\35\1\346\5\35\31\0\3\35"+
    "\6\0\11\35\5\0\2\35\1\347\25\35\31\0\3\35"+
    "\6\0\11\35\5\0\21\35\1\350\6\35\31\0\3\35"+
    "\6\0\11\35\5\0\15\35\1\351\12\35\31\0\3\35"+
    "\6\0\11\35\5\0\17\35\1\352\10\35\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11592];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\10\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\1\11\1\1\2\11\1\1\1\11\21\1\1\11"+
    "\1\1\1\11\1\1\2\11\1\0\1\11\1\1\1\0"+
    "\3\11\1\0\4\11\1\0\1\1\1\11\1\0\1\11"+
    "\1\0\4\11\36\1\3\11\3\0\1\11\1\1\1\0"+
    "\37\1\4\0\1\1\1\0\30\1\1\0\2\11\22\1"+
    "\1\0\1\11\1\0\1\11\13\1\1\11\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public ZenScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ZenScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 93: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 94: break;
          case 3:
            { return NEW_LINE;
            }
          // fall through
          case 95: break;
          case 4:
            { return OP_NOT;
            }
          // fall through
          case 96: break;
          case 5:
            { return STRING_LITERAL;
            }
          // fall through
          case 97: break;
          case 6:
            { return PREPROCESSOR;
            }
          // fall through
          case 98: break;
          case 7:
            { return OP_DOLLAR;
            }
          // fall through
          case 99: break;
          case 8:
            { return OP_MOD;
            }
          // fall through
          case 100: break;
          case 9:
            { return OP_AND;
            }
          // fall through
          case 101: break;
          case 10:
            { return PAREN_OPEN;
            }
          // fall through
          case 102: break;
          case 11:
            { return PAREN_CLOSE;
            }
          // fall through
          case 103: break;
          case 12:
            { return OP_MUL;
            }
          // fall through
          case 104: break;
          case 13:
            { return OP_ADD;
            }
          // fall through
          case 105: break;
          case 14:
            { return COMMA;
            }
          // fall through
          case 106: break;
          case 15:
            { return OP_SUB;
            }
          // fall through
          case 107: break;
          case 16:
            { return DOT;
            }
          // fall through
          case 108: break;
          case 17:
            { return OP_DIV;
            }
          // fall through
          case 109: break;
          case 18:
            { return INT_LITERAL;
            }
          // fall through
          case 110: break;
          case 19:
            { return OP_COLON;
            }
          // fall through
          case 111: break;
          case 20:
            { return SEMICOLON;
            }
          // fall through
          case 112: break;
          case 21:
            { return OP_LESS;
            }
          // fall through
          case 113: break;
          case 22:
            { return OP_ASSIGN;
            }
          // fall through
          case 114: break;
          case 23:
            { return OP_GREATER;
            }
          // fall through
          case 115: break;
          case 24:
            { return OP_QUEST;
            }
          // fall through
          case 116: break;
          case 25:
            { return ID;
            }
          // fall through
          case 117: break;
          case 26:
            { return BRACK_OPEN;
            }
          // fall through
          case 118: break;
          case 27:
            { return BRACK_CLOSE;
            }
          // fall through
          case 119: break;
          case 28:
            { return OP_XOR;
            }
          // fall through
          case 120: break;
          case 29:
            { return OP_BACKTICK;
            }
          // fall through
          case 121: break;
          case 30:
            { return BRACE_OPEN;
            }
          // fall through
          case 122: break;
          case 31:
            { return OP_OR;
            }
          // fall through
          case 123: break;
          case 32:
            { return BRACE_CLOSE;
            }
          // fall through
          case 124: break;
          case 33:
            { return OP_CAT;
            }
          // fall through
          case 125: break;
          case 34:
            { return OP_NOT_EQUAL;
            }
          // fall through
          case 126: break;
          case 35:
            { return OP_MOD_ASSIGN;
            }
          // fall through
          case 127: break;
          case 36:
            { return OP_AND_AND;
            }
          // fall through
          case 128: break;
          case 37:
            { return OP_AND_ASSIGN;
            }
          // fall through
          case 129: break;
          case 38:
            { return OP_MUL_ASSIGN;
            }
          // fall through
          case 130: break;
          case 39:
            { return OP_ADD_ASSIGN;
            }
          // fall through
          case 131: break;
          case 40:
            { return OP_SUB_ASSIGN;
            }
          // fall through
          case 132: break;
          case 41:
            { return OP_DOT_DOT;
            }
          // fall through
          case 133: break;
          case 42:
            { return LINE_COMMENT;
            }
          // fall through
          case 134: break;
          case 43:
            { return OP_DIV_ASSIGN;
            }
          // fall through
          case 135: break;
          case 44:
            { return LONG_LITERAL;
            }
          // fall through
          case 136: break;
          case 45:
            { return OP_LESS_EQUAL;
            }
          // fall through
          case 137: break;
          case 46:
            { return OP_EQUAL;
            }
          // fall through
          case 138: break;
          case 47:
            { return OP_GREATER_EQUAL;
            }
          // fall through
          case 139: break;
          case 48:
            { return OP_XOR_ASSIGN;
            }
          // fall through
          case 140: break;
          case 49:
            { return K_AS;
            }
          // fall through
          case 141: break;
          case 50:
            { return K_DO;
            }
          // fall through
          case 142: break;
          case 51:
            { return K_IF;
            }
          // fall through
          case 143: break;
          case 52:
            { return K_IN;
            }
          // fall through
          case 144: break;
          case 53:
            { return K_TO;
            }
          // fall through
          case 145: break;
          case 54:
            { return OP_OR_ASSIGN;
            }
          // fall through
          case 146: break;
          case 55:
            { return OP_OR_OR;
            }
          // fall through
          case 147: break;
          case 56:
            { return OP_CAT_ASSIGN;
            }
          // fall through
          case 148: break;
          case 57:
            { return K_ANY;
            }
          // fall through
          case 149: break;
          case 58:
            { return K_FOR;
            }
          // fall through
          case 150: break;
          case 59:
            { return K_HAS;
            }
          // fall through
          case 151: break;
          case 60:
            { return K_INT;
            }
          // fall through
          case 152: break;
          case 61:
            { return K_VAL;
            }
          // fall through
          case 153: break;
          case 62:
            { return K_VAR;
            }
          // fall through
          case 154: break;
          case 63:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 155: break;
          case 64:
            { return K_BOOL;
            }
          // fall through
          case 156: break;
          case 65:
            { return K_BYTE;
            }
          // fall through
          case 157: break;
          case 66:
            { return K_ELSE;
            }
          // fall through
          case 158: break;
          case 67:
            { return K_LONG;
            }
          // fall through
          case 159: break;
          case 68:
            { return K_NULL;
            }
          // fall through
          case 160: break;
          case 69:
            { return K_THIS;
            }
          // fall through
          case 161: break;
          case 70:
            { return K_TRUE;
            }
          // fall through
          case 162: break;
          case 71:
            { return K_VOID;
            }
          // fall through
          case 163: break;
          case 72:
            { return DOC_COMMENT;
            }
          // fall through
          case 164: break;
          case 73:
            { return DOUBLE_LITERAL;
            }
          // fall through
          case 165: break;
          case 74:
            { return K_BREAK;
            }
          // fall through
          case 166: break;
          case 75:
            { return K_FALSE;
            }
          // fall through
          case 167: break;
          case 76:
            { return K_FLOAT;
            }
          // fall through
          case 168: break;
          case 77:
            { return K_SHORT;
            }
          // fall through
          case 169: break;
          case 78:
            { return K_SUPER;
            }
          // fall through
          case 170: break;
          case 79:
            { return K_WHILE;
            }
          // fall through
          case 171: break;
          case 80:
            { return FLOAT_LITERAL;
            }
          // fall through
          case 172: break;
          case 81:
            { return K_DOUBLE;
            }
          // fall through
          case 173: break;
          case 82:
            { return K_GLOBAL;
            }
          // fall through
          case 174: break;
          case 83:
            { return K_IMPORT;
            }
          // fall through
          case 175: break;
          case 84:
            { return K_RETURN;
            }
          // fall through
          case 176: break;
          case 85:
            { return K_STATIC;
            }
          // fall through
          case 177: break;
          case 86:
            { return K_STRING;
            }
          // fall through
          case 178: break;
          case 87:
            { return K_EXPAND;
            }
          // fall through
          case 179: break;
          case 88:
            { return K_CONTINUE;
            }
          // fall through
          case 180: break;
          case 89:
            { return K_FUNCTION;
            }
          // fall through
          case 181: break;
          case 90:
            { return K_ZEN_CLASS;
            }
          // fall through
          case 182: break;
          case 91:
            { return K_INSTANCEOF;
            }
          // fall through
          case 183: break;
          case 92:
            { return K_ZEN_CONSTRUCTOR;
            }
          // fall through
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
