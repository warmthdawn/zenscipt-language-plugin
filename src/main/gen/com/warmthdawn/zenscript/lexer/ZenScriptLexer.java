/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.warmthdawn.zenscript.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;
import static com.warmthdawn.zenscript.psi.ZenScriptTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>D:/MyGames/Minecraft/develop/zenscipt-language-plugin/src/main/grammar/ZenScript.flex</tt>
 */
public class ZenScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\101\1\102\1\1\22\0\1\3\1\65\1\7\1\6\1\46\1\63\1\74\1\10\1"+
    "\50\1\51\1\5\1\61\1\56\1\62\1\57\1\4\1\77\10\15\1\14\1\71\1\60\1\66\1\76\1"+
    "\67\1\72\1\0\2\16\1\45\1\105\1\103\1\104\5\16\1\100\10\16\1\12\5\16\1\52\1"+
    "\11\1\53\1\70\1\16\1\73\1\21\1\26\1\32\1\41\1\37\1\17\1\24\1\36\1\31\1\16"+
    "\1\43\1\23\1\33\1\13\1\25\1\34\1\16\1\22\1\27\1\30\1\35\1\20\1\42\1\47\1\40"+
    "\1\44\1\54\1\75\1\55\1\64\6\0\1\101\242\0\2\101\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\2\10\1\11\20\10\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\1\1\42\1\0\1\43\1\44"+
    "\2\6\1\7\2\0\1\10\1\0\1\11\7\10\1\45"+
    "\12\10\1\46\1\10\1\47\1\50\4\10\1\51\2\10"+
    "\1\0\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\0"+
    "\2\42\2\0\1\10\1\0\1\70\2\10\1\71\1\10"+
    "\1\72\1\73\1\10\1\74\15\10\1\75\2\10\1\76"+
    "\4\10\3\0\1\77\1\0\1\100\1\0\3\10\1\101"+
    "\1\10\1\102\2\10\1\103\1\104\4\10\1\105\1\106"+
    "\3\10\1\107\3\10\1\0\1\77\1\110\1\111\1\112"+
    "\1\113\3\10\1\114\2\10\1\115\1\116\4\10\1\117"+
    "\2\10\1\0\1\120\1\0\1\111\1\10\1\121\1\122"+
    "\1\123\1\124\1\10\1\125\1\10\1\126\2\10\1\0"+
    "\1\111\5\10\1\127\1\130\1\10\1\131\1\132\3\10"+
    "\1\133\4\10\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\106\0\106\0\322\0\u0118\0\u015e"+
    "\0\u01a4\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e"+
    "\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be"+
    "\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\106\0\106"+
    "\0\106\0\106\0\106\0\106\0\106\0\u07a8\0\106\0\u07ee"+
    "\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\106"+
    "\0\106\0\106\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c"+
    "\0\106\0\106\0\u0bc2\0\106\0\106\0\u0c08\0\u0c4e\0\u0c94"+
    "\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4"+
    "\0\u0f0a\0\u0230\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae"+
    "\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u0230\0\u120c\0\u1252\0\u0230"+
    "\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482"+
    "\0\106\0\106\0\106\0\106\0\106\0\106\0\106\0\106"+
    "\0\106\0\106\0\106\0\106\0\106\0\106\0\u0af0\0\u14c8"+
    "\0\106\0\u150e\0\u1554\0\u159a\0\u15e0\0\106\0\u1626\0\u166c"+
    "\0\u0230\0\u16b2\0\u0230\0\u0230\0\u16f8\0\u0230\0\u173e\0\u1784"+
    "\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4"+
    "\0\u19fa\0\u1a40\0\u1a86\0\u0230\0\u1acc\0\u1b12\0\u0230\0\u1b58"+
    "\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1cfc\0\u1d42"+
    "\0\u0230\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u0230\0\u1ea0\0\u0230"+
    "\0\u1ee6\0\u1f2c\0\u0230\0\u0230\0\u1f72\0\u1fb8\0\u1ffe\0\u2044"+
    "\0\u0230\0\u0230\0\u208a\0\u20d0\0\u2116\0\u0230\0\u215c\0\u21a2"+
    "\0\u21e8\0\u222e\0\106\0\106\0\u2274\0\u0230\0\u0230\0\u22ba"+
    "\0\u2300\0\u2346\0\u0230\0\u238c\0\u23d2\0\u0230\0\u0230\0\u2418"+
    "\0\u245e\0\u24a4\0\u24ea\0\u0230\0\u2530\0\u2576\0\u25bc\0\106"+
    "\0\u2602\0\106\0\u2648\0\u0230\0\u0230\0\u0230\0\u0230\0\u268e"+
    "\0\u0230\0\u26d4\0\u0230\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832"+
    "\0\u2878\0\u28be\0\u2904\0\u294a\0\106\0\u0230\0\u2990\0\u0230"+
    "\0\u0230\0\u29d6\0\u2a1c\0\u2a62\0\u0230\0\u2aa8\0\u2aee\0\u2b34"+
    "\0\u2b7a\0\u0230";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\13\1\14\2\15\1\13\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\13\1\24\1\25\1\26"+
    "\1\27\1\30\3\13\1\31\1\32\1\13\1\33\1\34"+
    "\1\13\1\35\1\13\1\36\1\13\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\13\1\2\1\5"+
    "\3\13\110\0\1\4\107\0\1\67\1\70\70\0\1\71"+
    "\105\0\1\72\7\0\1\10\1\73\1\74\103\10\1\11"+
    "\2\0\4\11\1\75\1\11\1\76\74\11\1\12\2\0"+
    "\4\12\1\0\1\12\1\77\74\12\12\0\34\13\1\0"+
    "\1\13\27\0\2\13\2\0\3\13\12\0\23\13\1\100"+
    "\10\13\1\0\1\13\27\0\2\13\2\0\3\13\10\0"+
    "\1\101\3\0\2\102\61\0\1\102\20\0\7\13\1\103"+
    "\1\13\1\104\1\13\1\105\7\13\1\106\10\13\1\0"+
    "\1\13\27\0\2\13\2\0\3\13\12\0\7\13\1\107"+
    "\3\13\1\110\20\13\1\0\1\13\27\0\2\13\2\0"+
    "\3\13\12\0\1\13\1\111\13\13\1\112\16\13\1\0"+
    "\1\13\27\0\2\13\2\0\3\13\12\0\25\13\1\113"+
    "\6\13\1\0\1\13\27\0\2\13\2\0\3\13\12\0"+
    "\13\13\1\114\20\13\1\0\1\13\27\0\2\13\2\0"+
    "\3\13\12\0\11\13\1\115\22\13\1\0\1\13\27\0"+
    "\2\13\2\0\3\13\12\0\10\13\1\116\2\13\1\117"+
    "\12\13\1\120\5\13\1\0\1\13\27\0\2\13\2\0"+
    "\3\13\12\0\16\13\1\121\4\13\1\122\1\123\7\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\10\13"+
    "\1\124\2\13\1\125\10\13\1\126\7\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\1\13\1\127\3\13"+
    "\1\130\13\13\1\131\12\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\13\13\1\132\20\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\7\13\1\133\24\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\11\13"+
    "\1\134\22\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\13\13\1\135\20\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\24\13\1\136\7\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\25\13\1\137\6\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\37\0\1\140"+
    "\125\0\1\141\124\0\1\142\105\0\1\143\105\0\1\144"+
    "\105\0\1\145\105\0\1\146\105\0\1\147\105\0\1\150"+
    "\105\0\1\151\103\0\1\152\1\0\1\153\104\0\1\154"+
    "\1\155\105\0\1\156\17\0\1\101\3\0\2\157\61\0"+
    "\1\157\6\0\1\67\1\160\1\161\103\67\5\162\1\163"+
    "\100\162\2\0\1\74\112\0\1\11\1\0\3\11\1\0"+
    "\1\11\1\0\4\11\3\0\1\11\1\0\1\11\4\0"+
    "\1\11\11\0\1\11\27\0\1\11\16\0\4\12\1\0"+
    "\1\12\1\0\4\12\3\0\1\12\1\0\1\12\4\0"+
    "\1\12\11\0\1\12\27\0\1\12\20\0\11\13\1\164"+
    "\22\13\1\0\1\13\27\0\2\13\2\0\3\13\1\165"+
    "\2\0\76\165\2\0\3\165\10\0\1\101\3\0\2\102"+
    "\5\0\1\166\53\0\1\102\1\166\17\0\11\13\1\167"+
    "\22\13\1\0\1\13\27\0\2\13\2\0\3\13\12\0"+
    "\13\13\1\170\20\13\1\0\1\13\27\0\2\13\2\0"+
    "\3\13\12\0\10\13\1\171\23\13\1\0\1\13\27\0"+
    "\2\13\2\0\3\13\12\0\1\13\1\172\32\13\1\0"+
    "\1\13\27\0\2\13\2\0\3\13\12\0\10\13\1\173"+
    "\1\174\22\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\17\13\1\175\14\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\26\13\1\176\5\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\16\13\1\177\15\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\1\13"+
    "\1\200\32\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\13\13\1\201\20\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\25\13\1\202\6\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\13\13\1\203\20\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\16\13"+
    "\1\204\15\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\7\13\1\205\1\206\23\13\1\0\1\13\27\0"+
    "\2\13\2\0\3\13\12\0\22\13\1\207\11\13\1\0"+
    "\1\13\27\0\2\13\2\0\3\13\12\0\13\13\1\210"+
    "\20\13\1\0\1\13\27\0\2\13\2\0\3\13\12\0"+
    "\23\13\1\211\10\13\1\0\1\13\27\0\2\13\2\0"+
    "\3\13\12\0\17\13\1\212\14\13\1\0\1\13\27\0"+
    "\2\13\2\0\3\13\12\0\15\13\1\213\1\214\15\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\22\13"+
    "\1\215\11\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\1\13\1\216\32\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\15\13\1\217\16\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\15\13\1\220\16\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\23\13"+
    "\1\221\10\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\17\13\1\222\14\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\1\13\1\223\32\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\47\0\1\224\40\0\1\161"+
    "\103\0\5\162\1\225\100\162\4\226\1\227\1\230\100\226"+
    "\12\0\11\13\1\231\22\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\10\0\1\232\107\0\15\13\1\233\16\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\7\13"+
    "\1\234\24\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\20\13\1\235\13\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\27\13\1\236\4\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\23\13\1\237\10\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\12\13"+
    "\1\240\21\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\14\13\1\241\17\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\7\13\1\242\24\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\11\13\1\243\22\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\25\13"+
    "\1\244\6\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\16\13\1\245\15\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\17\13\1\246\14\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\25\13\1\247\6\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\10\13"+
    "\1\250\23\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\25\13\1\251\6\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\15\13\1\252\16\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\16\13\1\253\15\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\13\13"+
    "\1\254\20\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\16\13\1\255\15\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\25\13\1\256\6\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\14\13\1\257\17\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\11\13"+
    "\1\260\22\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\33\13\1\261\1\0\1\13\27\0\2\13\2\0"+
    "\3\13\34\0\1\262\51\0\4\162\1\263\1\225\100\162"+
    "\5\226\1\230\104\226\1\264\1\230\100\226\14\0\2\265"+
    "\61\0\1\265\20\0\25\13\1\266\6\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\16\13\1\267\15\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\16\13"+
    "\1\270\15\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\10\13\1\271\23\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\7\13\1\272\24\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\31\13\1\273\2\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\17\13"+
    "\1\274\14\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\1\13\1\275\32\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\10\13\1\276\23\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\16\13\1\277\15\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\7\13"+
    "\1\300\24\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\10\13\1\301\23\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\17\13\1\302\14\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\11\13\1\303\22\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\25\13"+
    "\1\304\6\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\11\13\1\305\1\13\1\306\20\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\21\0\1\307\100\0\2\265"+
    "\1\0\1\310\17\0\1\311\1\0\1\312\35\0\1\265"+
    "\3\0\1\311\1\310\1\312\12\0\17\13\1\313\14\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\1\13"+
    "\1\314\32\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\11\13\1\315\22\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\20\13\1\316\13\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\12\13\1\317\21\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\1\13"+
    "\1\320\32\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\16\13\1\321\15\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\1\13\1\322\32\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\25\13\1\323\6\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\7\13"+
    "\1\324\24\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\1\13\1\325\32\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\13\0\1\326\106\0\2\327\61\0\1\327"+
    "\20\0\13\13\1\330\20\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\12\0\20\13\1\331\13\13\1\0\1\13"+
    "\27\0\2\13\2\0\3\13\12\0\23\13\1\332\10\13"+
    "\1\0\1\13\27\0\2\13\2\0\3\13\12\0\15\13"+
    "\1\333\16\13\1\0\1\13\27\0\2\13\2\0\3\13"+
    "\12\0\15\13\1\334\16\13\1\0\1\13\27\0\2\13"+
    "\2\0\3\13\41\0\1\335\60\0\2\327\1\0\1\310"+
    "\21\0\1\312\35\0\1\327\4\0\1\310\1\312\12\0"+
    "\1\13\1\336\32\13\1\0\1\13\27\0\2\13\2\0"+
    "\3\13\12\0\25\13\1\337\6\13\1\0\1\13\27\0"+
    "\2\13\2\0\3\13\12\0\25\13\1\340\6\13\1\0"+
    "\1\13\27\0\2\13\2\0\3\13\12\0\15\13\1\341"+
    "\16\13\1\0\1\13\27\0\2\13\2\0\3\13\12\0"+
    "\16\13\1\342\15\13\1\0\1\13\27\0\2\13\2\0"+
    "\3\13\12\0\13\13\1\343\20\13\1\0\1\13\27\0"+
    "\2\13\2\0\3\13\12\0\10\13\1\344\23\13\1\0"+
    "\1\13\27\0\2\13\2\0\3\13\12\0\5\13\1\345"+
    "\26\13\1\0\1\13\27\0\2\13\2\0\3\13\12\0"+
    "\23\13\1\346\10\13\1\0\1\13\27\0\2\13\2\0"+
    "\3\13\12\0\20\13\1\347\13\13\1\0\1\13\27\0"+
    "\2\13\2\0\3\13\12\0\16\13\1\350\15\13\1\0"+
    "\1\13\27\0\2\13\2\0\3\13\12\0\13\13\1\351"+
    "\20\13\1\0\1\13\27\0\2\13\2\0\3\13\12\0"+
    "\10\13\1\352\23\13\1\0\1\13\27\0\2\13\2\0"+
    "\3\13";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\31\1\7\11\1\1\1\11"+
    "\10\1\3\11\5\1\1\0\2\11\1\1\2\11\2\0"+
    "\1\1\1\0\36\1\1\0\16\11\1\0\1\1\1\11"+
    "\2\0\1\1\1\0\1\11\35\1\3\0\1\1\1\0"+
    "\1\1\1\0\27\1\1\0\2\11\22\1\1\0\1\11"+
    "\1\0\1\11\13\1\1\0\6\1\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public ZenScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ZenScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 93: break;
          case 2: 
            { return NEW_LINE;
            } 
            // fall through
          case 94: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 95: break;
          case 4: 
            { return OP_DIV;
            } 
            // fall through
          case 96: break;
          case 5: 
            { return OP_MUL;
            } 
            // fall through
          case 97: break;
          case 6: 
            { return PREPROCESSOR;
            } 
            // fall through
          case 98: break;
          case 7: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 99: break;
          case 8: 
            { return ID;
            } 
            // fall through
          case 100: break;
          case 9: 
            { return INT_LITERAL;
            } 
            // fall through
          case 101: break;
          case 10: 
            { return OP_DOLLAR;
            } 
            // fall through
          case 102: break;
          case 11: 
            { return PAREN_OPEN;
            } 
            // fall through
          case 103: break;
          case 12: 
            { return PAREN_CLOSE;
            } 
            // fall through
          case 104: break;
          case 13: 
            { return BRACK_OPEN;
            } 
            // fall through
          case 105: break;
          case 14: 
            { return BRACK_CLOSE;
            } 
            // fall through
          case 106: break;
          case 15: 
            { return BRACE_OPEN;
            } 
            // fall through
          case 107: break;
          case 16: 
            { return BRACE_CLOSE;
            } 
            // fall through
          case 108: break;
          case 17: 
            { return COMMA;
            } 
            // fall through
          case 109: break;
          case 18: 
            { return DOT;
            } 
            // fall through
          case 110: break;
          case 19: 
            { return SEMICOLON;
            } 
            // fall through
          case 111: break;
          case 20: 
            { return OP_ADD;
            } 
            // fall through
          case 112: break;
          case 21: 
            { return OP_SUB;
            } 
            // fall through
          case 113: break;
          case 22: 
            { return OP_MOD;
            } 
            // fall through
          case 114: break;
          case 23: 
            { return OP_CAT;
            } 
            // fall through
          case 115: break;
          case 24: 
            { return OP_NOT;
            } 
            // fall through
          case 116: break;
          case 25: 
            { return OP_LESS;
            } 
            // fall through
          case 117: break;
          case 26: 
            { return OP_GREATER;
            } 
            // fall through
          case 118: break;
          case 27: 
            { return OP_XOR;
            } 
            // fall through
          case 119: break;
          case 28: 
            { return OP_COLON;
            } 
            // fall through
          case 120: break;
          case 29: 
            { return OP_QUEST;
            } 
            // fall through
          case 121: break;
          case 30: 
            { return OP_BACKTICK;
            } 
            // fall through
          case 122: break;
          case 31: 
            { return OP_AND;
            } 
            // fall through
          case 123: break;
          case 32: 
            { return OP_OR;
            } 
            // fall through
          case 124: break;
          case 33: 
            { return OP_ASSIGN;
            } 
            // fall through
          case 125: break;
          case 34: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 126: break;
          case 35: 
            { return OP_DIV_ASSIGN;
            } 
            // fall through
          case 127: break;
          case 36: 
            { return OP_MUL_ASSIGN;
            } 
            // fall through
          case 128: break;
          case 37: 
            { return K_AS;
            } 
            // fall through
          case 129: break;
          case 38: 
            { return K_TO;
            } 
            // fall through
          case 130: break;
          case 39: 
            { return K_IN;
            } 
            // fall through
          case 131: break;
          case 40: 
            { return K_IF;
            } 
            // fall through
          case 132: break;
          case 41: 
            { return K_DO;
            } 
            // fall through
          case 133: break;
          case 42: 
            { return OP_DOT_DOT;
            } 
            // fall through
          case 134: break;
          case 43: 
            { return OP_ADD_ASSIGN;
            } 
            // fall through
          case 135: break;
          case 44: 
            { return OP_SUB_ASSIGN;
            } 
            // fall through
          case 136: break;
          case 45: 
            { return OP_MOD_ASSIGN;
            } 
            // fall through
          case 137: break;
          case 46: 
            { return OP_CAT_ASSIGN;
            } 
            // fall through
          case 138: break;
          case 47: 
            { return OP_NOT_EQUAL;
            } 
            // fall through
          case 139: break;
          case 48: 
            { return OP_LESS_EQUAL;
            } 
            // fall through
          case 140: break;
          case 49: 
            { return OP_GREATER_EQUAL;
            } 
            // fall through
          case 141: break;
          case 50: 
            { return OP_XOR_ASSIGN;
            } 
            // fall through
          case 142: break;
          case 51: 
            { return OP_AND_AND;
            } 
            // fall through
          case 143: break;
          case 52: 
            { return OP_AND_ASSIGN;
            } 
            // fall through
          case 144: break;
          case 53: 
            { return OP_OR_OR;
            } 
            // fall through
          case 145: break;
          case 54: 
            { return OP_OR_ASSIGN;
            } 
            // fall through
          case 146: break;
          case 55: 
            { return OP_EQUAL;
            } 
            // fall through
          case 147: break;
          case 56: 
            { return LONG_LITERAL;
            } 
            // fall through
          case 148: break;
          case 57: 
            { return K_FOR;
            } 
            // fall through
          case 149: break;
          case 58: 
            { return K_VAR;
            } 
            // fall through
          case 150: break;
          case 59: 
            { return K_VAL;
            } 
            // fall through
          case 151: break;
          case 60: 
            { return K_ANY;
            } 
            // fall through
          case 152: break;
          case 61: 
            { return K_INT;
            } 
            // fall through
          case 153: break;
          case 62: 
            { return K_HAS;
            } 
            // fall through
          case 154: break;
          case 63: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 155: break;
          case 64: 
            { return K_NULL;
            } 
            // fall through
          case 156: break;
          case 65: 
            { return K_VOID;
            } 
            // fall through
          case 157: break;
          case 66: 
            { return K_LONG;
            } 
            // fall through
          case 158: break;
          case 67: 
            { return K_BOOL;
            } 
            // fall through
          case 159: break;
          case 68: 
            { return K_BYTE;
            } 
            // fall through
          case 160: break;
          case 69: 
            { return K_TRUE;
            } 
            // fall through
          case 161: break;
          case 70: 
            { return K_THIS;
            } 
            // fall through
          case 162: break;
          case 71: 
            { return K_ELSE;
            } 
            // fall through
          case 163: break;
          case 72: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 164: break;
          case 73: 
            { return DOUBLE_LITERAL;
            } 
            // fall through
          case 165: break;
          case 74: 
            { return K_FALSE;
            } 
            // fall through
          case 166: break;
          case 75: 
            { return K_FLOAT;
            } 
            // fall through
          case 167: break;
          case 76: 
            { return K_BREAK;
            } 
            // fall through
          case 168: break;
          case 77: 
            { return K_SUPER;
            } 
            // fall through
          case 169: break;
          case 78: 
            { return K_SHORT;
            } 
            // fall through
          case 170: break;
          case 79: 
            { return K_WHILE;
            } 
            // fall through
          case 171: break;
          case 80: 
            { return FLOAT_LITERAL;
            } 
            // fall through
          case 172: break;
          case 81: 
            { return K_RETURN;
            } 
            // fall through
          case 173: break;
          case 82: 
            { return K_GLOBAL;
            } 
            // fall through
          case 174: break;
          case 83: 
            { return K_STATIC;
            } 
            // fall through
          case 175: break;
          case 84: 
            { return K_STRING;
            } 
            // fall through
          case 176: break;
          case 85: 
            { return K_IMPORT;
            } 
            // fall through
          case 177: break;
          case 86: 
            { return K_DOUBLE;
            } 
            // fall through
          case 178: break;
          case 87: 
            { return K_EXPAND;
            } 
            // fall through
          case 179: break;
          case 88: 
            { return K_FUNCTION;
            } 
            // fall through
          case 180: break;
          case 89: 
            { return K_CONTINUE;
            } 
            // fall through
          case 181: break;
          case 90: 
            { return K_ZEN_CLASS;
            } 
            // fall through
          case 182: break;
          case 91: 
            { return K_INSTANCEOF;
            } 
            // fall through
          case 183: break;
          case 92: 
            { return K_ZEN_CONSTRUCTOR;
            } 
            // fall through
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
