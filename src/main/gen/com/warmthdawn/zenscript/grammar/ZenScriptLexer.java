/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.warmthdawn.zenscript.grammar;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;
import static com.warmthdawn.zenscript.psi.ZenScriptTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ZenScript.flex</tt>
 */
public class ZenScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\100\1\101\1\1\22\0\1\3\1\64\1\6\1\0\1\45\1\62\1\73\1\7\1\47"+
    "\1\50\1\5\1\60\1\55\1\61\1\56\1\4\1\76\10\14\1\13\1\70\1\57\1\65\1\75\1\66"+
    "\1\71\1\0\2\15\1\44\1\104\1\102\1\103\5\15\1\77\10\15\1\11\5\15\1\51\1\10"+
    "\1\52\1\67\1\15\1\72\1\20\1\25\1\31\1\40\1\36\1\16\1\23\1\35\1\30\1\15\1\42"+
    "\1\22\1\32\1\12\1\24\1\33\1\15\1\21\1\26\1\27\1\34\1\17\1\41\1\46\1\37\1\43"+
    "\1\53\1\74\1\54\1\63\6\0\1\100\242\0\2\100\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\2\5\2\6\1\7"+
    "\20\6\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\1\1\40\1\0\1\41\1\42\1\5\2\0"+
    "\1\6\1\0\1\7\7\6\1\43\12\6\1\44\1\6"+
    "\1\45\1\46\4\6\1\47\2\6\1\0\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\0\2\40\2\0\1\6"+
    "\1\0\1\66\2\6\1\67\1\6\1\70\1\71\1\6"+
    "\1\72\15\6\1\73\2\6\1\74\4\6\2\0\1\40"+
    "\1\75\1\0\3\6\1\76\1\6\1\77\2\6\1\100"+
    "\1\101\4\6\1\102\1\103\3\6\1\104\3\6\1\0"+
    "\1\105\1\106\1\107\3\6\1\110\2\6\1\111\1\112"+
    "\4\6\1\113\2\6\1\0\1\114\1\0\1\105\1\6"+
    "\1\115\1\116\1\117\1\120\1\6\1\121\1\6\1\122"+
    "\2\6\1\0\1\105\5\6\1\123\1\124\1\6\1\125"+
    "\1\126\3\6\1\127\4\6\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\105\0\317\0\u0114\0\u0159\0\u019e"+
    "\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\u06bd\0\u0702\0\105\0\105\0\105\0\105"+
    "\0\105\0\105\0\105\0\u0747\0\105\0\u078c\0\u07d1\0\u0816"+
    "\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\105\0\105\0\105"+
    "\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\105\0\105"+
    "\0\105\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0"+
    "\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u01e3\0\u0e8e\0\u0ed3"+
    "\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb"+
    "\0\u01e3\0\u1140\0\u1185\0\u01e3\0\u11ca\0\u120f\0\u1254\0\u1299"+
    "\0\u12de\0\u1323\0\u1368\0\u13ad\0\105\0\105\0\105\0\105"+
    "\0\105\0\105\0\105\0\105\0\105\0\105\0\105\0\105"+
    "\0\105\0\105\0\u0a83\0\u13f2\0\105\0\u1437\0\u147c\0\u14c1"+
    "\0\u1506\0\105\0\u154b\0\u1590\0\u01e3\0\u15d5\0\u01e3\0\u01e3"+
    "\0\u161a\0\u01e3\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8"+
    "\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u01e3"+
    "\0\u19e0\0\u1a25\0\u01e3\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e"+
    "\0\u1bc3\0\u1437\0\u01e3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u01e3"+
    "\0\u1d1c\0\u01e3\0\u1d61\0\u1da6\0\u01e3\0\u01e3\0\u1deb\0\u1e30"+
    "\0\u1e75\0\u1eba\0\u01e3\0\u01e3\0\u1eff\0\u1f44\0\u1f89\0\u01e3"+
    "\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u01e3\0\u01e3\0\u2127"+
    "\0\u216c\0\u21b1\0\u01e3\0\u21f6\0\u223b\0\u01e3\0\u01e3\0\u2280"+
    "\0\u22c5\0\u230a\0\u234f\0\u01e3\0\u2394\0\u23d9\0\u241e\0\105"+
    "\0\u2463\0\105\0\u24a8\0\u01e3\0\u01e3\0\u01e3\0\u01e3\0\u24ed"+
    "\0\u01e3\0\u2532\0\u01e3\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b"+
    "\0\u26d0\0\u2715\0\u275a\0\u279f\0\105\0\u01e3\0\u27e4\0\u01e3"+
    "\0\u01e3\0\u2829\0\u286e\0\u28b3\0\u01e3\0\u28f8\0\u293d\0\u2982"+
    "\0\u29c7\0\u01e3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\2\13\1\11\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\11\1\22\1\23\1\24\1\25\1\26"+
    "\3\11\1\27\1\30\1\11\1\31\1\32\1\11\1\33"+
    "\1\11\1\34\1\11\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\11\1\2\1\4\3\11\107\0"+
    "\1\4\106\0\1\65\1\66\67\0\1\67\104\0\1\70"+
    "\7\0\1\7\2\0\3\7\1\71\1\7\1\72\74\7"+
    "\1\10\2\0\3\10\1\0\1\10\1\73\74\10\11\0"+
    "\34\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\23\11\1\74\10\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\7\0\1\75\3\0\2\76\61\0\1\76\17\0"+
    "\7\11\1\77\1\11\1\100\1\11\1\101\7\11\1\102"+
    "\10\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\7\11\1\103\3\11\1\104\20\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\1\11\1\105\13\11\1\106"+
    "\16\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\25\11\1\107\6\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\13\11\1\110\20\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\11\11\1\111\22\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\10\11\1\112"+
    "\2\11\1\113\12\11\1\114\5\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\16\11\1\115\4\11\1\116"+
    "\1\117\7\11\1\0\1\11\27\0\2\11\2\0\3\11"+
    "\11\0\10\11\1\120\2\11\1\121\10\11\1\122\7\11"+
    "\1\0\1\11\27\0\2\11\2\0\3\11\11\0\1\11"+
    "\1\123\3\11\1\124\13\11\1\125\12\11\1\0\1\11"+
    "\27\0\2\11\2\0\3\11\11\0\13\11\1\126\20\11"+
    "\1\0\1\11\27\0\2\11\2\0\3\11\11\0\7\11"+
    "\1\127\24\11\1\0\1\11\27\0\2\11\2\0\3\11"+
    "\11\0\11\11\1\130\22\11\1\0\1\11\27\0\2\11"+
    "\2\0\3\11\11\0\13\11\1\131\20\11\1\0\1\11"+
    "\27\0\2\11\2\0\3\11\11\0\24\11\1\132\7\11"+
    "\1\0\1\11\27\0\2\11\2\0\3\11\11\0\25\11"+
    "\1\133\6\11\1\0\1\11\27\0\2\11\2\0\3\11"+
    "\36\0\1\134\124\0\1\135\123\0\1\136\104\0\1\137"+
    "\104\0\1\140\104\0\1\141\104\0\1\142\104\0\1\143"+
    "\104\0\1\144\104\0\1\145\102\0\1\146\1\0\1\147"+
    "\103\0\1\150\1\151\104\0\1\152\16\0\1\75\3\0"+
    "\2\153\61\0\1\153\6\0\1\65\1\154\1\155\102\65"+
    "\5\156\1\157\77\156\6\0\1\7\1\0\3\7\1\0"+
    "\1\7\1\0\4\7\3\0\1\7\1\0\1\7\4\0"+
    "\1\7\11\0\1\7\27\0\1\7\15\0\4\10\1\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\1\10\4\0"+
    "\1\10\11\0\1\10\27\0\1\10\17\0\11\11\1\160"+
    "\22\11\1\0\1\11\27\0\2\11\2\0\3\11\1\161"+
    "\2\0\75\161\2\0\3\161\7\0\1\75\3\0\2\76"+
    "\5\0\1\162\53\0\1\76\1\162\16\0\11\11\1\163"+
    "\22\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\13\11\1\164\20\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\10\11\1\165\23\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\1\11\1\166\32\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\10\11\1\167"+
    "\1\170\22\11\1\0\1\11\27\0\2\11\2\0\3\11"+
    "\11\0\17\11\1\171\14\11\1\0\1\11\27\0\2\11"+
    "\2\0\3\11\11\0\26\11\1\172\5\11\1\0\1\11"+
    "\27\0\2\11\2\0\3\11\11\0\16\11\1\173\15\11"+
    "\1\0\1\11\27\0\2\11\2\0\3\11\11\0\1\11"+
    "\1\174\32\11\1\0\1\11\27\0\2\11\2\0\3\11"+
    "\11\0\13\11\1\175\20\11\1\0\1\11\27\0\2\11"+
    "\2\0\3\11\11\0\25\11\1\176\6\11\1\0\1\11"+
    "\27\0\2\11\2\0\3\11\11\0\13\11\1\177\20\11"+
    "\1\0\1\11\27\0\2\11\2\0\3\11\11\0\16\11"+
    "\1\200\15\11\1\0\1\11\27\0\2\11\2\0\3\11"+
    "\11\0\7\11\1\201\1\202\23\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\22\11\1\203\11\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\13\11\1\204"+
    "\20\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\23\11\1\205\10\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\17\11\1\206\14\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\15\11\1\207\1\210\15\11"+
    "\1\0\1\11\27\0\2\11\2\0\3\11\11\0\22\11"+
    "\1\211\11\11\1\0\1\11\27\0\2\11\2\0\3\11"+
    "\11\0\1\11\1\212\32\11\1\0\1\11\27\0\2\11"+
    "\2\0\3\11\11\0\15\11\1\213\16\11\1\0\1\11"+
    "\27\0\2\11\2\0\3\11\11\0\15\11\1\214\16\11"+
    "\1\0\1\11\27\0\2\11\2\0\3\11\11\0\23\11"+
    "\1\215\10\11\1\0\1\11\27\0\2\11\2\0\3\11"+
    "\11\0\17\11\1\216\14\11\1\0\1\11\27\0\2\11"+
    "\2\0\3\11\11\0\1\11\1\217\32\11\1\0\1\11"+
    "\27\0\2\11\2\0\3\11\46\0\1\220\40\0\1\155"+
    "\102\0\5\156\1\221\103\156\1\222\1\221\77\156\11\0"+
    "\11\11\1\223\22\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\7\0\1\224\106\0\15\11\1\225\16\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\7\11\1\226"+
    "\24\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\20\11\1\227\13\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\27\11\1\230\4\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\23\11\1\231\10\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\12\11\1\232"+
    "\21\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\14\11\1\233\17\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\7\11\1\234\24\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\11\11\1\235\22\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\25\11\1\236"+
    "\6\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\16\11\1\237\15\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\17\11\1\240\14\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\25\11\1\241\6\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\10\11\1\242"+
    "\23\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\25\11\1\243\6\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\15\11\1\244\16\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\16\11\1\245\15\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\13\11\1\246"+
    "\20\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\16\11\1\247\15\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\25\11\1\250\6\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\14\11\1\251\17\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\11\11\1\252"+
    "\22\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\33\11\1\253\1\0\1\11\27\0\2\11\2\0\3\11"+
    "\33\0\1\254\51\0\4\156\1\155\1\221\77\156\13\0"+
    "\2\255\61\0\1\255\17\0\25\11\1\256\6\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\16\11\1\257"+
    "\15\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\16\11\1\260\15\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\10\11\1\261\23\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\7\11\1\262\24\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\31\11\1\263"+
    "\2\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\17\11\1\264\14\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\1\11\1\265\32\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\10\11\1\266\23\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\16\11\1\267"+
    "\15\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\7\11\1\270\24\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\10\11\1\271\23\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\17\11\1\272\14\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\11\11\1\273"+
    "\22\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\25\11\1\274\6\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\11\11\1\275\1\11\1\276\20\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\20\0\1\277\77\0"+
    "\2\255\1\0\1\300\17\0\1\301\1\0\1\302\35\0"+
    "\1\255\3\0\1\301\1\300\1\302\11\0\17\11\1\303"+
    "\14\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\1\11\1\304\32\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\11\11\1\305\22\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\20\11\1\306\13\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\12\11\1\307"+
    "\21\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\1\11\1\310\32\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\16\11\1\311\15\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\1\11\1\312\32\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\25\11\1\313"+
    "\6\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\7\11\1\314\24\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\1\11\1\315\32\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\12\0\1\316\105\0\2\317\61\0"+
    "\1\317\17\0\13\11\1\320\20\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\11\0\20\11\1\321\13\11\1\0"+
    "\1\11\27\0\2\11\2\0\3\11\11\0\23\11\1\322"+
    "\10\11\1\0\1\11\27\0\2\11\2\0\3\11\11\0"+
    "\15\11\1\323\16\11\1\0\1\11\27\0\2\11\2\0"+
    "\3\11\11\0\15\11\1\324\16\11\1\0\1\11\27\0"+
    "\2\11\2\0\3\11\40\0\1\325\57\0\2\317\1\0"+
    "\1\300\21\0\1\302\35\0\1\317\4\0\1\300\1\302"+
    "\11\0\1\11\1\326\32\11\1\0\1\11\27\0\2\11"+
    "\2\0\3\11\11\0\25\11\1\327\6\11\1\0\1\11"+
    "\27\0\2\11\2\0\3\11\11\0\25\11\1\330\6\11"+
    "\1\0\1\11\27\0\2\11\2\0\3\11\11\0\15\11"+
    "\1\331\16\11\1\0\1\11\27\0\2\11\2\0\3\11"+
    "\11\0\16\11\1\332\15\11\1\0\1\11\27\0\2\11"+
    "\2\0\3\11\11\0\13\11\1\333\20\11\1\0\1\11"+
    "\27\0\2\11\2\0\3\11\11\0\10\11\1\334\23\11"+
    "\1\0\1\11\27\0\2\11\2\0\3\11\11\0\5\11"+
    "\1\335\26\11\1\0\1\11\27\0\2\11\2\0\3\11"+
    "\11\0\23\11\1\336\10\11\1\0\1\11\27\0\2\11"+
    "\2\0\3\11\11\0\20\11\1\337\13\11\1\0\1\11"+
    "\27\0\2\11\2\0\3\11\11\0\16\11\1\340\15\11"+
    "\1\0\1\11\27\0\2\11\2\0\3\11\11\0\13\11"+
    "\1\341\20\11\1\0\1\11\27\0\2\11\2\0\3\11"+
    "\11\0\10\11\1\342\23\11\1\0\1\11\27\0\2\11"+
    "\2\0\3\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10764];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\30\1\7\11\1\1\1\11"+
    "\10\1\3\11\5\1\1\0\3\11\2\0\1\1\1\0"+
    "\36\1\1\0\16\11\1\0\1\1\1\11\2\0\1\1"+
    "\1\0\1\11\35\1\2\0\2\1\1\0\27\1\1\0"+
    "\22\1\1\0\1\11\1\0\1\11\13\1\1\0\6\1"+
    "\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public ZenScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ZenScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case YYINITIAL: {
              return EOF;
            }  // fall though
            case 227: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 89: break;
          case 2: 
            { /* skip */
            } 
            // fall through
          case 90: break;
          case 3: 
            { return OP_DIV;
            } 
            // fall through
          case 91: break;
          case 4: 
            { return OP_MUL;
            } 
            // fall through
          case 92: break;
          case 5: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 93: break;
          case 6: 
            { return ID;
            } 
            // fall through
          case 94: break;
          case 7: 
            { return INT_LITERAL;
            } 
            // fall through
          case 95: break;
          case 8: 
            { return OP_DOLLAR;
            } 
            // fall through
          case 96: break;
          case 9: 
            { return PAREN_OPEN;
            } 
            // fall through
          case 97: break;
          case 10: 
            { return PAREN_CLOSE;
            } 
            // fall through
          case 98: break;
          case 11: 
            { return BRACK_OPEN;
            } 
            // fall through
          case 99: break;
          case 12: 
            { return BRACK_CLOSE;
            } 
            // fall through
          case 100: break;
          case 13: 
            { return BRACE_OPEN;
            } 
            // fall through
          case 101: break;
          case 14: 
            { return BRACE_CLOSE;
            } 
            // fall through
          case 102: break;
          case 15: 
            { return COMMA;
            } 
            // fall through
          case 103: break;
          case 16: 
            { return DOT;
            } 
            // fall through
          case 104: break;
          case 17: 
            { return SEMICOLON;
            } 
            // fall through
          case 105: break;
          case 18: 
            { return OP_ADD;
            } 
            // fall through
          case 106: break;
          case 19: 
            { return OP_SUB;
            } 
            // fall through
          case 107: break;
          case 20: 
            { return OP_MOD;
            } 
            // fall through
          case 108: break;
          case 21: 
            { return OP_CAT;
            } 
            // fall through
          case 109: break;
          case 22: 
            { return OP_NOT;
            } 
            // fall through
          case 110: break;
          case 23: 
            { return OP_LESS;
            } 
            // fall through
          case 111: break;
          case 24: 
            { return OP_GREATER;
            } 
            // fall through
          case 112: break;
          case 25: 
            { return OP_XOR;
            } 
            // fall through
          case 113: break;
          case 26: 
            { return OP_COLON;
            } 
            // fall through
          case 114: break;
          case 27: 
            { return OP_QUEST;
            } 
            // fall through
          case 115: break;
          case 28: 
            { return OP_BACKTICK;
            } 
            // fall through
          case 116: break;
          case 29: 
            { return OP_AND;
            } 
            // fall through
          case 117: break;
          case 30: 
            { return OP_OR;
            } 
            // fall through
          case 118: break;
          case 31: 
            { return OP_ASSIGN;
            } 
            // fall through
          case 119: break;
          case 32: 
            { return COMMENT;
            } 
            // fall through
          case 120: break;
          case 33: 
            { return OP_DIV_ASSIGN;
            } 
            // fall through
          case 121: break;
          case 34: 
            { return OP_MUL_ASSIGN;
            } 
            // fall through
          case 122: break;
          case 35: 
            { return K_AS;
            } 
            // fall through
          case 123: break;
          case 36: 
            { return K_TO;
            } 
            // fall through
          case 124: break;
          case 37: 
            { return K_IN;
            } 
            // fall through
          case 125: break;
          case 38: 
            { return K_IF;
            } 
            // fall through
          case 126: break;
          case 39: 
            { return K_DO;
            } 
            // fall through
          case 127: break;
          case 40: 
            { return OP_DOT_DOT;
            } 
            // fall through
          case 128: break;
          case 41: 
            { return OP_ADD_ASSIGN;
            } 
            // fall through
          case 129: break;
          case 42: 
            { return OP_SUB_ASSIGN;
            } 
            // fall through
          case 130: break;
          case 43: 
            { return OP_MOD_ASSIGN;
            } 
            // fall through
          case 131: break;
          case 44: 
            { return OP_CAT_ASSIGN;
            } 
            // fall through
          case 132: break;
          case 45: 
            { return OP_NOT_EQUAL;
            } 
            // fall through
          case 133: break;
          case 46: 
            { return OP_LESS_EQUAL;
            } 
            // fall through
          case 134: break;
          case 47: 
            { return OP_GREATER_EQUAL;
            } 
            // fall through
          case 135: break;
          case 48: 
            { return OP_XOR_ASSIGN;
            } 
            // fall through
          case 136: break;
          case 49: 
            { return OP_AND_AND;
            } 
            // fall through
          case 137: break;
          case 50: 
            { return OP_AND_ASSIGN;
            } 
            // fall through
          case 138: break;
          case 51: 
            { return OP_OR_OR;
            } 
            // fall through
          case 139: break;
          case 52: 
            { return OP_OR_ASSIGN;
            } 
            // fall through
          case 140: break;
          case 53: 
            { return OP_EQUAL;
            } 
            // fall through
          case 141: break;
          case 54: 
            { return LONG_LITERAL;
            } 
            // fall through
          case 142: break;
          case 55: 
            { return K_FOR;
            } 
            // fall through
          case 143: break;
          case 56: 
            { return K_VAR;
            } 
            // fall through
          case 144: break;
          case 57: 
            { return K_VAL;
            } 
            // fall through
          case 145: break;
          case 58: 
            { return K_ANY;
            } 
            // fall through
          case 146: break;
          case 59: 
            { return K_INT;
            } 
            // fall through
          case 147: break;
          case 60: 
            { return K_HAS;
            } 
            // fall through
          case 148: break;
          case 61: 
            { return K_NULL;
            } 
            // fall through
          case 149: break;
          case 62: 
            { return K_VOID;
            } 
            // fall through
          case 150: break;
          case 63: 
            { return K_LONG;
            } 
            // fall through
          case 151: break;
          case 64: 
            { return K_BOOL;
            } 
            // fall through
          case 152: break;
          case 65: 
            { return K_BYTE;
            } 
            // fall through
          case 153: break;
          case 66: 
            { return K_TRUE;
            } 
            // fall through
          case 154: break;
          case 67: 
            { return K_THIS;
            } 
            // fall through
          case 155: break;
          case 68: 
            { return K_ELSE;
            } 
            // fall through
          case 156: break;
          case 69: 
            { return DOUBLE_LITERAL;
            } 
            // fall through
          case 157: break;
          case 70: 
            { return K_FALSE;
            } 
            // fall through
          case 158: break;
          case 71: 
            { return K_FLOAT;
            } 
            // fall through
          case 159: break;
          case 72: 
            { return K_BREAK;
            } 
            // fall through
          case 160: break;
          case 73: 
            { return K_SUPER;
            } 
            // fall through
          case 161: break;
          case 74: 
            { return K_SHORT;
            } 
            // fall through
          case 162: break;
          case 75: 
            { return K_WHILE;
            } 
            // fall through
          case 163: break;
          case 76: 
            { return FLOAT_LITERAL;
            } 
            // fall through
          case 164: break;
          case 77: 
            { return K_RETURN;
            } 
            // fall through
          case 165: break;
          case 78: 
            { return K_GLOBAL;
            } 
            // fall through
          case 166: break;
          case 79: 
            { return K_STATIC;
            } 
            // fall through
          case 167: break;
          case 80: 
            { return K_STRING;
            } 
            // fall through
          case 168: break;
          case 81: 
            { return K_IMPORT;
            } 
            // fall through
          case 169: break;
          case 82: 
            { return K_DOUBLE;
            } 
            // fall through
          case 170: break;
          case 83: 
            { return K_EXPAND;
            } 
            // fall through
          case 171: break;
          case 84: 
            { return K_FUNCTION;
            } 
            // fall through
          case 172: break;
          case 85: 
            { return K_CONTINUE;
            } 
            // fall through
          case 173: break;
          case 86: 
            { return K_ZEN_CLASS;
            } 
            // fall through
          case 174: break;
          case 87: 
            { return K_INSTANCEOF;
            } 
            // fall through
          case 175: break;
          case 88: 
            { return K_ZEN_CONSTRUCTOR;
            } 
            // fall through
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
